---
layout: layouts/base.liquid
title: Find Affordable Housing
permalink: 
  build: "/housing/affordable-housing/index.html"
  serverless: "/housing/affordable-housing/filter"
pageClass: "page-housing"
pageHead: '<script src="/js/accessibility.js" defer></script>'
---
{% assign updateButtonStr = "Update results" %}
{% assign query = eleventy.serverless.query %}
{% assign summaryProps = "unitType,openStatus" | split: "," %}
{% assign housingdb = query | housingResults | summarizeUnits: summaryProps %}
{% assign num_results = housingdb | size %}
{% assign num_filters_applied = query | numFiltersApplied %}
{% capture num_results_snippet %}
  Showing {% if num_filters_applied == 0 %}all {% endif %}{{num_results}} {% if num_results == 1 %}property{% else %}properties{% endif %}
{% endcapture %}

<script>
function CopyUrl() {
  navigator.clipboard.writeText(window.location.href);
  document.getElementById("copy-url-done").removeAttribute("hidden");
  return false;
}

// Show a loading message by changing the submit button to say "Loading..."
function ShowLoading() {
  let submitButton = document.getElementById("filter-submit");
  submitButton.value = "Loading...";
  submitButton.disabled = "disabled";
}

function HideLoading() {
  let submitButton = document.getElementById("filter-submit");
  submitButton.value = "{{updateButtonStr}}";
  submitButton.removeAttribute("disabled");
}

// Show a hidden checkbox with id optionId depending on the value ofinputId.
function ToggleHiddenOption(optionId, inputId) {
  let option = document.getElementById(optionId);
  let input = document.getElementById(inputId);
  if (input.value) {
    option.parentElement.removeAttribute("hidden");
  } else {
    option.parentElement.setAttribute("hidden", "hidden");
  }
}

function ToggleRentOption() {
  ToggleHiddenOption("include-unknown-rent", "rent-max");
}

function ToggleIncomeOption() {
  ToggleHiddenOption("include-unknown-income", "income");
}

// If the filtering form GETs the results page's url with
// the anchor hash (e.g. action="/affordable-housing/filter#results")
// then the form submission button will be disabled and the
// page will not reload if the user clicks on the submit button
// without first changing the filter state.  So, to force a 
// page reload every time, have the form GET e.g. 
// /affordable-housing/filter and manually scroll to the anchor
// after the page loads.  Also ensure the rent and income checkboxes
// are shown if those fields are filled. 
{% if num_filters_applied > 0 %} 
function OnWindowLoad() {
  ToggleRentOption();
  ToggleIncomeOption();
  location.hash = "#results";
}
window.onload = function() {OnWindowLoad()};
{% endif %}

function OnPageShow() {
  // When the user departs the page by applying filters, the submit
  // button text changes to a loading message.  Ensure that loading
  // message is gone if the user returns to the page via the back
  // navigation arrow.
  HideLoading();
}

window.onpageshow = function() {OnPageShow()};

</script>

<h1>{{title}}
<span class="subtitle">In Santa Clara County</span></h1>
<p class="noprint bold">
{{num_results_snippet}}
</p>
{% if num_filters_applied == 0 %}
<p>
Narrow your search with the filter options below or <a href="#results">scroll</a> to the full list of properties 
</p>
{% else %}
<p class="noprint">
{{num_filters_applied}} {% if num_filters_applied == 1 %}filter is {% else %}filters are {% endif %}applied. <a href="/housing/affordable-housing">Clear filters</a>
</p>
{% endif %}


<section aria-label="Housing Filter Options">
<form action="/housing/affordable-housing/filter" action="get" id="housing-search" class="housing_search" onsubmit="ShowLoading();">
  
  {% assign filterValues = filterValues | updateFilterState: query %}

  {% for section in filterValues %}
  <fieldset>
    <legend>{{section.heading}}</legend>
    <div class="option_columns
    {% if section.name == "populationsServed" %} 
      wide
    {% endif %}
    ">
    {% assign sortedOpts = section.options | rankSort: "name" %}
    {% for opt in sortedOpts %}
      {% assign optId = section.name | append : '-' | append: opt.name | downcase | replace: ' ', '-' %}
      <input type="checkbox" id="{{optId}}" value="{{opt.name}}" name="{{section.name}}" {% if opt.selected %}checked{% endif %}>
      {% if opt.name == "SRO" %}
          {% assign label = '<abbr role="definition" aria-label="Single Room Occupancy">SRO</abbr>' %}
      {% else %}
          {% assign label = opt.name %}
      {% endif %}
      <label for="{{optId}}">{{label}}</label><br/>
    {% endfor %}
    </div>
  </fieldset>
  {% endfor %}

  <fieldset>
    <legend>Rent</legend>
    <div>
      <label for="rent-max">Maximum ($ per month)</label>
      <input type="number" oninput="ToggleRentOption();" min="0" id="rent-max" name="rentMax" value="{{query.rentMax | escape}}"><br/>
      <span id="include-unknown-rent-container" hidden>
        <input type="checkbox" id="include-unknown-rent" name="includeUnknownRent"
        {% if num_filters_applied == 0 or query.includeUnknownRent == "on" %}checked{% endif %}>
        <label for="include-unknown-rent">Include properties with no rent information</label>
      </span>
    </div>
  </fieldset>

  <fieldset>
    <legend>Income</legend>
    <div>
      <label for="income">Yearly Income ($)</label>
      <p data-toggletip data-toggletip-class="icon_query">Provide your income to hide properties you are not eligible for. Your information will not be stored.</p>
      <input type="number" oninput="ToggleIncomeOption();" min="0" id="income" name="income" value="{{query.income | escape}}"><br/>
      <span id="include-unknown-income-container" hidden>
        <input type="checkbox" id="include-unknown-income" name="includeUnknownIncome"
        {% if num_filters_applied == 0 or query.includeUnknownIncome == "on" %}checked{% endif %}>
        <label for="include-unknown-income">Include properties with no income limit information</label>
      </span>
    </div>
  </fieldset>

  <fieldset>
    <legend>More Filters</legend>
    <div>
      <input type="checkbox" id="wheelchair-accessible-only" name="wheelchairAccessibleOnly"
        {% if query.wheelchairAccessibleOnly == "on" %}checked{% endif %}>
      <label for="wheelchair-accessible-only">Only show wheelchair-accessible properties</label>
      <br/>
      <input type="checkbox" id="include-referrals" name="includeReferrals"
        {% if query.includeReferrals == "on" %}checked{% endif %}>
      <label for="include-referrals">Include properties requiring an agency referral</label>
      <p data-toggletip data-toggletip-class="icon_query">  
        Some properties only accept applications by referral through an agency or case manager and do not allow the general public to apply.
      </p>
      <p>
      <label for="property-name">Property Name</label>
      <input type="text" id="property-name" value="{{query.propertyName | escape}}" name="propertyName">
      </p>
    </div>
  </fieldset>

  <div class="form_controls">
    <input type="submit" id="filter-submit" class="btn btn_primary noprint" value="{{updateButtonStr}}"/>
  </div>
</form>
</section>

<section id="results" class="anchor_context" aria-label="Housing Results">
  <div class="align-end flex stack-reversed">
    <p class="noprint bold">
    {{num_results_snippet}}
    </p>
    <div>
      {% if num_results > 0 %}
        <a class="btn btn_secondary noprint btn_print " title="Print summary of results" href="/housing/affordable-housing/table?{{eleventy.serverless.query | queryString}}">
          <svg role="img" aria-hidden="true" focusable="false" class="icon ">
            <use xlink:href="/images/sprites.svg#print"></use>
          </svg>
          Print summary of results
        </a>
        <a class="btn btn_secondary noprint" title="Show results in a checklist" href="/housing/affordable-housing/tracker?{{eleventy.serverless.query | queryString}}">
          Show results in a checklist
        </a>
        {% comment %} 
        <a class="btn btn_secondary noprint btn_download " title="Download these results in CSV format">
           <svg role="img" aria-hidden="true" focusable="false" class="icon ">
            <use xlink:href="/images/sprites.svg#download"></use>
          </svg>
          CSV
        </a>
        {% endcomment %}
      {% endif %}
    </div>
  </div>
  {% if num_filters_applied > 0 %}
    <p class="noprint collapse_top">To save this search, bookmark this page or <a href="javascript:CopyUrl();">copy the URL</a> <span id="copy-url-done" hidden>&#10003;</span></p>
  {% endif %}
  {% assign sortedHousingdb = housingdb | sort: "aptName" %}

  <div class="flex row_reversed results_container">
    <div id="map-toggle" class="noprint">
      <button type="button" class="btn btn_secondary">Show Map</button>
    </div>
    <div id="map-container" class="responsive_split responsive_sticky">
      <div class="split_right_container">
        <div id="map"></div>
        <div id="map-legend"><h3>Legend</h3></div>
      </div>
    </div>
    <div id="list-container" class="responsive_split">
      <ul class="results_list" aria-label="Results List">
        {% for address in sortedHousingdb %}
          <li id="property-{{address.id}}">
            {% render "affordable-housing-item.liquid", address: address, showMapLink: true %}
          </li>
        {% endfor %}
        {% if num_results == 0 %}
          <li class="no_results">
            Try changing the filter options above to broaden your search and see more results.
          </li>
        {% endif %}
      </ul>
    </div>
  </div>
</section>

<div>
<p>
  This affordable housing list is compiled from many separate housing lists across Santa Clara County in order to provide a single searchable resource.  We strive to be as accurate as possible, but always confirm property details with the property manager.
</p>
</div>

<script
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDgy4aWlGUJAEQ6pyQjMhSPf4k0lLIpURk&callback=initMap&v=weekly"
        defer
      ></script>
  <script src="https://unpkg.com/@googlemaps/markerclusterer/dist/index.min.js"></script>
<script>

  const locations = [
  {% for address in sortedHousingdb %}
    {% if address.locCoords and address.locCoords != '' %}
      {% assign coords = address.locCoords | split: "," %}
      {% capture rawContent %}
        <div id="infowindow-{{address.id}}" class="map_infowindow_content">
          {% render "affordable-housing-item.liquid", address: address, showMapLink: false %}
        </div> 
      {% endcapture %}
      { lat: {{coords[0]}}, lng: {{coords[1]}}, content: '{{ rawContent | replace: "\n", ""}}', id: "{{address.id}}" },
    {% endif %}
  {% endfor %}
  ];

  const stops = [
  {% for stop in transitData %}
    { lat: {{stop.lat}}, lng: {{stop.lng}}, name: "{{stop.name}}" },
  {% endfor %}
  ];

  // Initialize and add the map
  function initMap() {
    let toggleButton = document.querySelector("#map-toggle button");
    let mapContainer = document.getElementById("map-container");
    let listContainer = document.getElementById("list-container");

    const centerLatLng = { lat: 37.233907, lng: -121.756180 };
    const map = new google.maps.Map(document.getElementById("map"), {
      mapId: "9cafc548a28110af",
      zoom: 9,
      center: centerLatLng,
      gestureHandling: "greedy",
      mapTypeControlOptions: {
        style: google.maps.MapTypeControlStyle.DROPDOWN_MENU,
        mapTypeIds: ["roadmap", "satellite"],
      },
      fullscreenControlOptions: {
      position: google.maps.ControlPosition.BOTTOM_LEFT,
    },
    });
    let bounds = new google.maps.LatLngBounds();
    let infowindow = new google.maps.InfoWindow({
      disableAutoPan: false
    });
    let markers = [];
    for (const loc of locations) {
      const marker = new google.maps.Marker({
        position: new google.maps.LatLng(loc.lat, loc.lng),
        map: map,
        title: loc.name,
      });
      let listItem = document.getElementById("property-" + loc.id);

      marker.addListener("click", (e, disableScroll) => {
        if (infowindow.listItem) {
          infowindow.listItem.classList.remove('highlighted');
        }
        infowindow.setContent(loc.content);
        // infowindow.setContent(
        //   '<div class="info-window-content">' +
        //   '<h1>' + loc.name + '</h1>' +
        //   '<div>' +
        //   '<a href="/housing/affordable-housing/' + loc.id + '">More Info</a>' +
        //   '</div>' +
        //   '</div>'
        // );
        infowindow.open({
          anchor: marker,
          map,
          shouldFocus: false,
        });
    
        if (!disableScroll) {
          listItem.scrollIntoView({behavior: 'smooth'});
        }
        listItem.classList.add('highlighted');
        infowindow.listItem = listItem;
        map.setZoom(15);
        map.panTo(marker.getPosition());
      });

      // TODO: add the link button from scratch here instead of finding it in
      // the DOM. Also,  only add the button if a marker exists for that list
      // item.
      let linkButton = listItem.querySelector("button.map_link");
      if (linkButton) {
        linkButton.addEventListener("click", () => {
          google.maps.event.trigger(marker, "click", null, true);
          // Hide list and show map.
          mapContainer.classList.remove("responsive_hidden");
          mapContainer.classList.add("responsive_visible");
          listContainer.classList.remove("responsive_visible");
          listContainer.classList.add("responsive_hidden");
          toggleButton.textContent ="Show List";
          toggleButton.scrollIntoView();
        });
      }

      bounds.extend(loc);
      markers.push(marker);
    }
    map.fitBounds(bounds);

    google.maps.event.addListener(infowindow,'closeclick',function(){
      this.listItem.classList.remove('highlighted');
    });

    let radius = 50;
    let minPoints = 4;
    let algorithm = new markerClusterer.SuperClusterAlgorithm({radius, minPoints});
    //new markerClusterer.MarkerClusterer({ markers, map, algorithm });
    
    // const transitLayer = new google.maps.TransitLayer();
    // transitLayer.setMap(map);

    // "https://mt.google.com/vt/icon/name=icons/spotlight/measle_8px.png&scale=1"
    let smallBusIcon = "/images/measle_8px.png"
    let largeBusIcon = "https://mt.google.com/vt/icon/name=icons/spotlight/transit/bus_small.png&scale=1"

    let stopMarkers = [];
    for (const stop of stops) {
      const marker = new google.maps.Marker({
        position: new google.maps.LatLng(stop.lat, stop.lng),
        map: map,
        icon: {
          url: smallBusIcon,
          //size: new google.maps.Size(15, 15),
          //anchor: new google.maps.Point(7, 7)
        },
        visible: false,
      });
      marker.addListener("click", () => {
        infowindow.setContent(
          '<div class="info-window-content">' +
          '<h1>VTA Bus Stop</h1>' + 
          stop.name +
          '</div>');
        infowindow.open({
          anchor: marker,
          map,
          shouldFocus: false,
        });
      });
      stopMarkers.push(marker);
    }

    const legend = document.getElementById("map-legend");
    const div = document.createElement("div");

    div.innerHTML = '<img src="' + smallBusIcon + '"> ' + 'Bus Stop';
    legend.appendChild(div);

    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(legend);

    // TODO: redraw markers only after idle event fires so as not to 
    // cause zoom animation lag.
    google.maps.event.addListener(map, 'zoom_changed', function() {
      const zoom = map.getZoom();
      // iterate over markers and call setVisible
      for (i = 0; i < stopMarkers.length; i++) {
        stopMarkers[i].setVisible(zoom > 12);
        if (zoom > 14) {
          stopMarkers[i].setIcon(largeBusIcon);
        } else {
          stopMarkers[i].setIcon(smallBusIcon);
        }
      }
      if (zoom > 12) {
        legend.removeAttribute("hidden");
      } else {
        legend.setAttribute("hidden", "hidden");
      }
      if (zoom > 14) {
        div.innerHTML = '<img src="' + largeBusIcon + '"> ' + 'Bus Stop';
      } else {
        div.innerHTML = '<img src="' + smallBusIcon + '"> ' + 'Bus Stop';
      }
    });
    
    toggleButton.addEventListener("click", () => {
      if (listContainer.classList.contains("responsive_hidden")) {
        // Hide map and show list
        listContainer.classList.remove("responsive_hidden");
        listContainer.classList.add("responsive_visible");
        mapContainer.classList.remove("responsive_visible");
        mapContainer.classList.add("responsive_hidden");
        toggleButton.textContent = "Show Map";
      } else {
        // Hide list and show map.
        mapContainer.classList.remove("responsive_hidden");
        mapContainer.classList.add("responsive_visible");
        listContainer.classList.remove("responsive_visible");
        listContainer.classList.add("responsive_hidden");
        toggleButton.textContent ="Show List";
        map.fitBounds(bounds);
      }
    });
  }

  window.initMap = initMap;
</script>
