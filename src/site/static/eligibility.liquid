---
layout: layouts/base.liquid
title: Find Assistance Programs For You
permalink: 
  build: "/public-assistance/eligibility/index.html"
pageClass: "page-public-assistance"
---

<h1>{{title}}</h1>

<p>
  Use this tool to find assistance programs for which you qualify.  Fill in each field to the best of your knowledge.  <span class="bold">The information you enter here is completely private and will not be transmitted or stored in any way.</span>
</p>
<p>
  After entering your information, you will be provided with a list of assistance programs you can apply for.
</p>

<div>
  <div class="progress_bar flex"><div id="done-bar" class="progress_bar done"></div><div id="to-do-bar" class="progress_bar remaining"></div></div>
  <div class="flex">
    <span class="badge badge__done"><span id="done-val" class="bold">0</span><span class="bold">%</span> done</span>
    <span class="badge badge__remaining"><span id="to-do-val" class="bold">100</span><span class="bold">%</span> remaining</span>
  </div>
</div>

<div class="section_map">
  <ul>
  </ul>
</div>


<form id="eligibility">
  <div id="section-intro" class="elig_section" >
    <div id="page-intro" class="elig_page">
      <p>
        Introductory text.
      </p>
      <p>
        This form will ask you about a variety of things.
      </p>
    </div>
  </div>

  <div id="section-things-you-like" class="elig_section hidden">
    <h2>Yourself</h2>
    <p>
      This section-level text will be shown for every page in this section.
    </p>
    <div id="page-select-likes" class="elig_page hidden">
      <div id="likes-wrapper">
        If "I like days of the week" is selected, a secondary follow-up page will be shown.  Otherwise, the form will move on to the next section.  Select all that apply:
        <ul class="multiselect">
          <li>
            <input id="likes-animals" type="checkbox" name="option">
            <label for="likes-animals">I like animals.</label>
          </li>
          <li>
            <input id="likes-vehicles" type="checkbox" name="option">
            <label for="likes-vehicles">I like vehicles.</label>
          </li>
          <li>
            <input id="likes-days" type="checkbox" name="option">
            <label for="likes-days">I like days of the week.</label>
          </li>
        </ul>
      </div>
    </div>
    <div id="page-today" class="elig_page hidden">
      <p>
        This page is only shown if the user selected "I like days of the week" on the previous page.
      </p>
      <div id="weekday-wrapper">
        <label for="weekday">What day of the week is it?</label>
        <input id="weekday" type="text">
      </div>

      <div id="date-wrapper">
        <label for="date">What is the date?</label>
        <input id="date" type="number">
      </div>
    </div>
  </div>
  
  <div id="section-color" class="elig_section hidden">
    <h2>Your Household</h2>
    <div id="page-color" class="elig_page hidden">
      <p>
        Here we are in a new section.
      </p>
      <div id="favorite-color-wrapper">
        <label for="favorite-color">What is your favorite color?</label>
        <input id="favorite-color" type="text">
      </div>
    </div>
  </div>

  <div id="section-income" class="elig_section hidden">
    <h2>Income</h2>
    <div id="page-income" class="elig_page hidden"></div>
  </div>

  <div id="section-existing-assistance" class="elig_section hidden">
    <h2>Existing Assistance</h2>
    <div id="page-assistance" class="elig_page hidden"></div>
  </div>

  <div id="section-results" class="hidden">
    <h2>Results</h2>
    <div id="page-results" class="elig_page hidden">
      <p>
        This is an example results page that would show content based on form input values.
        <ul>
          <li>Result 1</li>
          <li>Result 2</li>
          <li>Result 3</li>
          <li>Result 4</li>
        </ul>
      </p>
    </div>
  </div>

  <div id="controls">
    <button type="button" class="btn btn_secondary hidden" id="back-button">Back</button>
    <button type="button" class="btn btn_primary" id="next-button">Next</button>
    <button type="button" class="btn btn_primary hidden" id="submit-button">Finish</button>
  </div>
</form>

<script>
  let currentPageNumber = 0;
  let finalPageNumber = 0;
  // TODO: is it necessary to group pages by section in the array?
  let pageArray = [];
  let pageMap = {};
  
  let currentPage;
  let currentSection;

  function setElementVisibility(elem, makeVisible) {
    if (elem) {
      if (makeVisible) {
        elem.classList.remove("hidden");
      } else {
        elem.classList.add("hidden");
      }
    }
  }

  function setPageVisibility(pageNumber, makeVisible) {
    const page = document.getElementById("page-" + pageNumber);
    setElementVisibility(page, makeVisible);
  }

  function setSubmitVisibility(makeVisible) {
    const submitButton = document.getElementById("submit-button");
    setElementVisibility(submitButton, makeVisible);
  }

  function setNextVisibility(makeVisible) {
    const nextButton = document.getElementById("next-button");
    setElementVisibility(nextButton, makeVisible);
  }

  function setBackVisibility(makeVisible) {
    const backButton = document.getElementById("back-button");
    setElementVisibility(backButton, makeVisible);
  }

  function updateProgress(page) {
    const doneVal = document.getElementById("done-val");
    const todoVal = document.getElementById("to-do-val");
    const doneBar = document.getElementById("done-bar");
    const todoBar = document.getElementById("to-do-bar");
    const numPages = pageArray.length;
    if (numPages > 2) {
      // Ignore intro page and results page.
      const donePercent = 100 * Math.max(0, page.idx - 1) / (numPages - 2);
      const todoPercent = 100 - donePercent;
      doneBar.style.width = donePercent + "%";
      todoBar.style.width = todoPercent + "%";
      doneVal.textContent = donePercent.toFixed(0);
      todoVal.textContent = todoPercent.toFixed(0);
    }
  }

  function configureButtons(page) {
    let resultsPage = !page.next();
    // TODO: is there a better way than 'results'?
    let finalInputPage = page.next()?.id == 'page-results'
    let firstPage = !page.previous;
    if (finalInputPage) {
      setBackVisibility(true);
      setNextVisibility(false);
      setSubmitVisibility(true);
    } else if (firstPage) {
      setBackVisibility(false);
      setNextVisibility(true);
      setSubmitVisibility(false);
    } else if (resultsPage) {
      setBackVisibility(true);
      setNextVisibility(false);
      setSubmitVisibility(false);
    } else {
      setBackVisibility(true);
      setNextVisibility(true);
      setSubmitVisibility(false);
    }
  }

  function buildSectionMap() {
    sectionSet = new Set(pageArray.map(p => p.section.id));
    console.log(sectionSet);
    const sectionMapList = document.querySelector("div.section_map ul");
    for (const sectionId of sectionSet) {
      const section = document.getElementById(sectionId);
      const heading = section.querySelector("h2");
      if (!heading) {
        continue;
      }
      const button = document.createElement("button");
      //button.className = "btn btn_secondary";
      button.textContent = heading.textContent;
      const listItem = document.createElement("li");
      console.log(button);
      listItem.appendChild(button);
      sectionMapList.appendChild(listItem);
    }
  }

  function gatherPages() {
    pages = document.querySelectorAll("div.elig_page");
    for (let j = 0; j < pages.length; j++) {
      pages[j].idx = j;
      pages[j].section = pages[j].parentElement;
      pages[j].next = function() {
        return pages[j + 1];
      };
      pageMap[pages[j].id] = pages[j];
      pageArray.push(pages[j]);
    }
    console.log(pageArray);
    console.log(pageMap);
    currentPage = pageArray[0];
  }

  function connectPages() {
    pageMap["page-select-likes"].next = function() {
      const likesDays = document.getElementById("likes-days").checked;
      if (likesDays) {
        return pageMap["page-today"];
      } else {
        return pageMap["page-color"];
      }
    };
  }

  function showNextPage() {
    console.dir(currentPage);
    console.log(currentPage.idx);
    let nextPage = currentPage.next();
    console.dir(nextPage);
    if (nextPage) {
      setElementVisibility(currentPage, false);
      setElementVisibility(nextPage, true);
      if (nextPage.section.id != currentPage.section.id) {
        setElementVisibility(currentPage.section, false);
        setElementVisibility(nextPage.section, true);
      }
      nextPage.previous = currentPage;
      currentPage = nextPage;
    }
    configureButtons(currentPage);
    updateProgress(currentPage);
  }

  function showPrevPage() {
    let previousPage = currentPage.previous;
    if (previousPage) {
      setElementVisibility(currentPage, false);
      setElementVisibility(previousPage, true);
      if (previousPage.section.id != currentPage.section.id) {
        setElementVisibility(currentPage.section, false);
        setElementVisibility(previousPage.section, true);
      }
      currentPage = previousPage;
    }
    configureButtons(currentPage);
    updateProgress(currentPage);
  }

  function computeEligibility() {
    console.log("TODO: Determine program eligibility");
  }

  function submitForm() {
    computeEligibility();
    showNextPage();
  }

  function addListeners() {
    document.getElementById("next-button").addEventListener("click", showNextPage);
    document.getElementById("back-button").addEventListener("click", showPrevPage);
    document.getElementById("submit-button").addEventListener("click", submitForm);
  }

  // Script entry point.
  function run() {
    gatherPages();
    connectPages();
    buildSectionMap();
    addListeners();
  }

  run();
</script>